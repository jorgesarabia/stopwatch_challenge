// Mocks generated by Mockito 5.4.4 from annotations
// in stopwatch_challenge/test/views/controllers/mock_stopwatch_controller.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:ui' as _i6;

import 'package:mockito/mockito.dart' as _i1;
import 'package:stopwatch_challenge/models/saved_stopwatch.dart' as _i5;
import 'package:stopwatch_challenge/models/stopwatch_model.dart' as _i2;
import 'package:stopwatch_challenge/views/controllers/stopwatch_controller.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeStopwatchModel_0 extends _i1.SmartFake
    implements _i2.StopwatchModel {
  _FakeStopwatchModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [StopwatchController].
///
/// See the documentation for Mockito's code generation for more information.
class MockStopwatchController extends _i1.Mock
    implements _i3.StopwatchController {
  MockStopwatchController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.StopwatchModel get stopwatchModel => (super.noSuchMethod(
        Invocation.getter(#stopwatchModel),
        returnValue: _FakeStopwatchModel_0(
          this,
          Invocation.getter(#stopwatchModel),
        ),
      ) as _i2.StopwatchModel);

  @override
  set stopwatchModel(_i2.StopwatchModel? _stopwatchModel) => super.noSuchMethod(
        Invocation.setter(
          #stopwatchModel,
          _stopwatchModel,
        ),
        returnValueForMissingStub: null,
      );

  @override
  int get bestLap => (super.noSuchMethod(
        Invocation.getter(#bestLap),
        returnValue: 0,
      ) as int);

  @override
  set bestLap(int? _bestLap) => super.noSuchMethod(
        Invocation.setter(
          #bestLap,
          _bestLap,
        ),
        returnValueForMissingStub: null,
      );

  @override
  int get worstLap => (super.noSuchMethod(
        Invocation.getter(#worstLap),
        returnValue: 0,
      ) as int);

  @override
  set worstLap(int? _worstLap) => super.noSuchMethod(
        Invocation.setter(
          #worstLap,
          _worstLap,
        ),
        returnValueForMissingStub: null,
      );

  @override
  int get tab => (super.noSuchMethod(
        Invocation.getter(#tab),
        returnValue: 0,
      ) as int);

  @override
  set tab(int? _tab) => super.noSuchMethod(
        Invocation.setter(
          #tab,
          _tab,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Stream<int> get timerStream => (super.noSuchMethod(
        Invocation.getter(#timerStream),
        returnValue: _i4.Stream<int>.empty(),
      ) as _i4.Stream<int>);

  @override
  bool get isZero => (super.noSuchMethod(
        Invocation.getter(#isZero),
        returnValue: false,
      ) as bool);

  @override
  bool get isRuning => (super.noSuchMethod(
        Invocation.getter(#isRuning),
        returnValue: false,
      ) as bool);

  @override
  bool get isStopped => (super.noSuchMethod(
        Invocation.getter(#isStopped),
        returnValue: false,
      ) as bool);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  void updateTab(int? newTab) => super.noSuchMethod(
        Invocation.method(
          #updateTab,
          [newTab],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void start() => super.noSuchMethod(
        Invocation.method(
          #start,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void stop() => super.noSuchMethod(
        Invocation.method(
          #stop,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void reset() => super.noSuchMethod(
        Invocation.method(
          #reset,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<List<_i5.SavedStopwatch>> getSavedStopwatches() =>
      (super.noSuchMethod(
        Invocation.method(
          #getSavedStopwatches,
          [],
        ),
        returnValue:
            _i4.Future<List<_i5.SavedStopwatch>>.value(<_i5.SavedStopwatch>[]),
      ) as _i4.Future<List<_i5.SavedStopwatch>>);

  @override
  _i4.Future<void> deleteHistory() => (super.noSuchMethod(
        Invocation.method(
          #deleteHistory,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void loadSavedStopwatch(_i5.SavedStopwatch? savedStopwatch) =>
      super.noSuchMethod(
        Invocation.method(
          #loadSavedStopwatch,
          [savedStopwatch],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void getLap() => super.noSuchMethod(
        Invocation.method(
          #getLap,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i6.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i6.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
